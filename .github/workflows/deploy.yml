name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent concurrent deployments to the same environment
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Create test .env file
        run:  |
          echo "SECRET_KEY=test-secret-key-for-ci" > .env
          echo "DEBUG=True" >> .env
          echo "ALLOWED_HOSTS=localhost" >> .env

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run linter (ruff)
        run: uv run ruff check .

      - name: Run format check (ruff)
        run: uv run ruff format --check .

      - name: Run tests
        run: uv run python manage.py test

      - name: Build Docker image
        run: docker build --tag remove-bg:latest .

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write

    env:
      GCP_PROJECT_ID: remove-bg-475814
      GCP_REGION: us-central1
      SERVICE_NAME: remove-bg
      ARTIFACT_REGISTRY_REPO: us-central1-docker.pkg.dev/remove-bg-475814/remove-bg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build and push Docker image
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Get existing service URLs (if exists)
        id: get-url
        run: |
          set +e  # Allow command to fail without stopping script

          PRIMARY_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format='value(status.url)' 2>/dev/null)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error

          if [ $EXIT_CODE -eq 0 ] && [ -n "$PRIMARY_URL" ]; then
            # Cloud Run has both modern and legacy URL formats
            # Both are permanent and should be in ALLOWED_HOSTS
            LEGACY_URL="https://remove-bg-5osl6hp5aq-uc.a.run.app"
            MODERN_URL="https://remove-bg-1074036933469.us-central1.run.app"

            # Build comma-separated lists including both known URLs
            CSRF_ORIGINS="${LEGACY_URL},${MODERN_URL}"
            ALLOWED_HOSTS="${LEGACY_URL#https://},${MODERN_URL#https://}"

            echo "SERVICE_URL=${CSRF_ORIGINS}" >> "$GITHUB_OUTPUT"
            echo "SERVICE_HOST=${ALLOWED_HOSTS}" >> "$GITHUB_OUTPUT"
            echo "first_deployment=false" >> "$GITHUB_OUTPUT"
            echo "Using both Cloud Run URLs: ${ALLOWED_HOSTS}"
          else
            # For first deployment, use a wildcard pattern that matches Cloud Run URLs
            echo "SERVICE_URL=" >> "$GITHUB_OUTPUT"
            echo "SERVICE_HOST=.run.app" >> "$GITHUB_OUTPUT"
            echo "first_deployment=true" >> "$GITHUB_OUTPUT"
            echo "First deployment - using wildcard .run.app"
          fi

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.ARTIFACT_REGISTRY_REPO }}/app:latest
          region: ${{ env.GCP_REGION }}
          flags: |
            --memory=2Gi
            --cpu=2
            --timeout=300
            --max-instances=2
            --min-instances=0
            --allow-unauthenticated
          env_vars: |
            DEBUG=False
            ALLOWED_HOSTS=${{ steps.get-url.outputs.SERVICE_HOST }}
            CSRF_TRUSTED_ORIGINS=${{ steps.get-url.outputs.SERVICE_URL }}
          secrets: |
            SECRET_KEY=django-secret-key:latest

      - name: Update service with correct URL (if needed)
        if: steps.get-url.outputs.first_deployment == 'true'
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          SERVICE_HOST="${SERVICE_URL#https://}"

          echo "First deployment detected. Updating with actual URL: ${SERVICE_URL}"

          # Wait for service to be fully ready
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format='value(status.conditions[0].status)' > /dev/null

          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --update-env-vars="ALLOWED_HOSTS=${SERVICE_HOST},CSRF_TRUSTED_ORIGINS=${SERVICE_URL}" \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Show deployment URL
        run: |
          echo "Service deployed successfully!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
